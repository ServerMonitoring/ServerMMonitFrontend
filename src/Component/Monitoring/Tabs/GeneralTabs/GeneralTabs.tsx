import React, { useEffect, useState } from "react";
import "./GeneralTabs.scss";
import { RootState } from "../../../../state/RootReduceer";
import  { getStaticMetrics } from "../../../../API/metric";
import { useSelector } from "react-redux";

interface Tab {
  id: string;
  label: string;
  icon: string;
  content: JSX.Element;
}

export default function ServerDetails() {
  const [activeTab, setActiveTab] = useState("general");
  const [isContentVisible, setIsContentVisible] = useState(true);
  const [serverData, setServerData] = useState<any>(null); // –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
  const jwt = useSelector((state: RootState) => state.auth.user.token);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ URL
  function extractLastNumberFromURL(url: string): number | null {
    const matches = url.match(/\d+/g);
    return matches && matches.length > 0 ? parseInt(matches[matches.length - 1], 10) : null;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    const id = extractLastNumberFromURL(window.location.href);
    if (id) {
      async function fetchServerInfo() {
        try {
          await getStaticMetrics(jwt, id)
          .then((response)=>{
            console.log(response.data)
            setServerData(response.data[0]); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
          })
          console.log(serverData)
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞:", error);
        }
      }
      fetchServerInfo();
    }
  }, [jwt]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
  const tabs: Tab[] = [
    {
      id: "general",
      label: "–û–±—â–∏–µ",
      icon: "üìã",
      content: (
        <div className="tab-content">
          {serverData ? (
            <>
              <p><strong>–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞:</strong> {serverData.serverName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              <p><strong>IP-–∞–¥—Ä–µ—Å:</strong> {serverData.address || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              <p><strong>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</strong> {serverData.osInfo || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              <p><strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> {serverData.addInfo || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
            </>
          ) : (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          )}
        </div>
      ),
    },
    {
      id: "cpu",
      label: "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä",
      icon: "üíª",
      content: (
        <div className="tab-content">
          {serverData ? (
            <>
              <p><strong>–ú–æ–¥–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:</strong> {serverData.cpuModel || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä (—Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö):</strong> {serverData.cpuCountCoresPhysical || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä (–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö):</strong> {serverData.cpuCountCores || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              <p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞:</strong> {serverData.maxFreq ? `${serverData.maxFreq} MHz` : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              <p><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞:</strong> {serverData.minFreq ? `${serverData.minFreq} MHz` : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
            </>
          ) : (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          )}
        </div>
      ),
    }
  ];

  // –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const handleTabChange = (tabId: string) => {
    setIsContentVisible(false); // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    setTimeout(() => {
      setActiveTab(tabId);
      setIsContentVisible(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  };

  return (
    <div className="server-details-container">
      {/* –ü–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="tabs">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={activeTab === tab.id ? "active" : ""}
            onClick={() => handleTabChange(tab.id)}
          >
            <span className="icon">{tab.icon}</span>
            {tab.label}
          </button>
        ))}
      </div>

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */}
      <div className={`tab-content-wrapper ${isContentVisible ? "visible" : ""}`}>
        {tabs.find((tab) => tab.id === activeTab)?.content}
      </div>
    </div>
  );
}